
export const createSkyeAppointment = async ({id,...appointment}:CreateAppointmentParams) => {
  try {
    const appointmentRef = collection(db, 'skyeAppointment');
    
    // Include the createdAt field with the current timestamp
    const appointmentWithTimestamp = {
      ...appointment,
      id,
    };

    // Add the document to Firestore
    const docRef = await addDoc(appointmentRef, appointmentWithTimestamp);

    // Log the document ID and other details
    console.log('Appointment added successfully:', docRef.id);

    // Send SMS notification to the admin
   // const adminPhoneNumber = process.env.ADMIN_PHONE_NUMBER;
    const userName = appointment.name;  // Retrieve the name of the user who created the appointment


    try {
      const message = await client.messages.create({
        body: `An appointment has been created by ${userName}. Please go and confirm availability.`,
        from: '+12089131544',  // Replace with your Twilio number
        to: '+2349074358404'  // Admin's phone number
      });

      console.log('SMS sent successfully:', message.sid);
    } catch (smsError:any) {
      // Handle errors related to Twilio SMS sending
      console.error('Error sending SMS:', smsError);

      // Optionally log the error in Firestore or another logging service
      // For example, you could create an error log in Firestore:
      const errorRef = collection(db, 'smsErrors');
      await addDoc(errorRef, {
        error: smsError.message,
        appointmentId: docRef.id,
        username: userName
      });

      // Return a response with error details if necessary
      return {
        error: 'SMS not sent. Please check Twilio configuration.',
        appointmentId: docRef.id,
        username: userName
      };
    } 
   
    // Return the document ID or other useful information
    return {
      ...appointmentWithTimestamp,
      id: docRef.id
    };
  } catch (error) {
    console.error('Error adding appointment:', error);
    throw error;
  }
};





export const updateAppointments = async (userId: string, appointmentToUpdate: { appointment: Partial<Appointment>, type: string }) => {
  const appointmentId = appointmentToUpdate.appointment.id; // Get the id from the appointment object

  if (!appointmentId) {
    throw new Error("Appointment ID is required for updating an appointment.");
  }

  try {
    const appointmentRef = doc(db, 'skyeAppointment', appointmentId); // Reference the specific document

    // Update the document with new values
    const updatedAppointment = await updateDoc(appointmentRef, {
      ...appointmentToUpdate.appointment,
      // Add any other fields to update if necessary
    });
    console.log(appointmentToUpdate.appointment.phoneNumber)
    console.log(appointmentToUpdate.appointment.note)


 try {
      const message = await client.messages.create({
        body: appointmentToUpdate.appointment.note + ' -booking confirmed',
        from: process.env.TW_PHONE_NUMBER,  // Replace with your Twilio number
        to: appointmentToUpdate.appointment.phoneNumber! // Admin's phone number
      });

      console.log('SMS sent successfully:', message.sid);
    } catch (smsError:any) {
      // Handle errors related to Twilio SMS sending
      console.error('Error sending SMS:', smsError);
    } 
    console.log('Appointment updated successfully:', appointmentId);
    revalidatePath('/admin')
    return updatedAppointment
  } catch (error) {
    console.error('Error updating appointment:', error);
    throw error; // Propagate the error
  }
};